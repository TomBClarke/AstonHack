import java.net.InetSocketAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Set;

import org.java_websocket.WebSocket;
import org.java_websocket.exceptions.WebsocketNotConnectedException;
import org.java_websocket.handshake.ClientHandshake;
import org.java_websocket.server.WebSocketServer;
import org.json.JSONException;
import org.json.JSONObject;

public class Main extends WebSocketServer {

	/**
	 * Maps connections to their names
	 */
	private HashMap<WebSocket, String> connections;

	/**
	 * Build simple socket server
	 * @throws UnknownHostException
	 */
	public Main() throws UnknownHostException {
		super(new InetSocketAddress(3000));
		
		connections = new HashMap<WebSocket, String>();
	}

	@Override
	public void onClose(WebSocket ws, int code, String reason, boolean remote) {
		System.out.println("Close");
	}

	@Override
	public void onError(WebSocket ws, Exception e) {
		e.printStackTrace();
	}

	@Override
	public void onMessage(WebSocket ws, String message) {
		if (checkMetaMessage(ws, message)) {
			return;
		}

		Message m = new Message(ws, message);

		broadcast(m.toString());
	}

	@Override
	public void onOpen(WebSocket ws, ClientHandshake chs) {
		connections.put(ws, "");
	}

	/**
	 * Check if a message is a meta image
	 * @param ws The sender
	 * @param message Message sent
	 * @return Whether it's a meta message
	 */
	private boolean checkMetaMessage(WebSocket ws, String message) {
		try {
			JSONObject json = new JSONObject(message);
			
			if (json.getString("type").equals("nameset")) {
				String newName = json.getString("newName");
				connections.put(ws, newName);
			}
			
			return true;
		} catch (JSONException e) {
			return false;
		}
	}

	/**
	 * Broadcast a message to all connected clients
	 * @param message
	 */
	private void broadcast(String message) {
		// WS registered
		Set<WebSocket> keySet = connections.keySet();

		// List containing what WS to remove
		List<WebSocket> toRemove = new ArrayList<WebSocket>();
		
		// Loop through and broadcast to all connected
		for (WebSocket ws : keySet) {
			System.out.println("Broadcasting to " + ws);
			System.out.println("Name: " + connections.get(ws));
			try {				
				ws.send(message);
			} catch (WebsocketNotConnectedException e){
				System.out.println("WebSocket not connected - adding to remove list");
				toRemove.add(ws);
			}
		}
		
		// Remove all the WS that we needed to
		for (WebSocket ws : toRemove) {
			connections.remove(ws);
		}
	}

	/**
	 * Contains information about a message
	 * @author misha
	 *
	 */
	private class Message {
		/**
		 * The text and sender of the message
		 */
		private String text, sender;

		/**
		 * @param ws Sender
		 * @param text Text of message
		 */
		public Message(WebSocket ws, String text) {
			this.text = text;
			this.sender = connections.get(ws);
		}

		@Override
		public String toString() {
			return "{\"text\": \"" + this.text + "\", \"sender\": \"" + this.sender + "\"}";
		}
	}
	
	public static void main(String[] args) {
		try {
			Main m = new Main();
			m.start();
		} catch (UnknownHostException e) {
			e.printStackTrace();
		}
	}
}
